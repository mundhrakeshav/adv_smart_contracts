#define function addTwo(uint256,uint256) view returns(uint256)

#define constant NUM = 0x420

#define macro MAIN() = takes(0) returns(0) {

    // Get the function selector
    0x00
    calldataload
    0xE0
    shr
    // 1. Duplicate the setValue function sig 
    // 2. check if it is equal to value on stack.
    // 3. if it is eq to value on stack then jump to setValue routine

    // dup1 __FUNC_SIG(setValue) eq setValue jumpi // Compare function selector to setValue(uint256)


    // Jump to the implementation of the ADD_TWO function if the calldata matches the function selector
    __FUNC_SIG(addTwo) eq addTwo jumpi

    addTwo:
        ADD_TWO()
}

#define macro ADD_TWO() = takes(0) returns(0) {
    0x04 calldataload     // load first 32 bytes onto the stack - number 1
    0x24 calldataload     // load second 32 bytes onto the stack - number 2
    add                   // add number 1 and 2 and put the result onto the stack
    0x00 mstore           // place the result in memory
    0x20 0x00 return      // return the result
}
// Constructor Logic _ Runtime Code
// 600f8060093d393df3_6000356020350160005260206000f3%

/**
    Runtime Code
BYTECODE          MNEMONIC         STACK                 ACTION
 60 00          // PUSH1 0x00       // [0x00]
 35             // CALLDATALOAD     // [number1]          Store the first 32 bytes on the stack
 60 20          // PUSH1 0x20       // [0x20, number1]
 35             // CALLDATALOAD     // [number2, number1] Store the second 32 bytes on the stack
 01             // ADD              // [number2+number1]  Take two stack inputs and add the result
 60 00          // PUSH1 0x00       // [0x0, (n2+n1)]
 52             // MSTORE           // []                 Store (n2+n1) in the first 32 bytes of memory
 60 20          // PUSH1 0x20       // [0x20]
 60 00          // PUSH1 0x00       // [0x00, 0x20]
 f3             // RETURN           // []                 Return the first 32 bytes of memory

 */



// // Interface
// #define function allowance(address,address) view returns (uint256)
// #define function approve(address,uint256) nonpayable returns ()
// #define function balanceOf(address) view returns (uint256)
// #define function totalSupply() view returns (uint256)
// #define function transfer(address,uint256) nonpayable returns ()
// #define function transferFrom(address,address,uint256) nonpayable returns ()
// #define function decimals() nonpayable returns (uint256)
// #define function name() nonpayable returns (string)
// #define function symbol() nonpayable returns (string)

// // Function Dispatching
// #define macro MAIN() = takes (1) returns (1) {
//     // Identify which function is being called.
//     0x00 calldataload 0xE0 shr          // [func_sig]
//     dup1 __FUNC_SIG(name)               eq nameJump             jumpi
//     dup1 __FUNC_SIG(symbol)             eq symbolJump           jumpi
//     dup1 __FUNC_SIG(decimals)           eq decimalsJump         jumpi
//     dup1 __FUNC_SIG(totalSupply)        eq totalSupplyJump      jumpi
//     dup1 __FUNC_SIG(balanceOf)          eq balanceOfJump        jumpi
//     dup1 __FUNC_SIG(allowance)          eq allowanceJump        jumpi
//     dup1 __FUNC_SIG(transfer)           eq transferJump         jumpi
//     dup1 __FUNC_SIG(transferFrom)       eq transferFromJump     jumpi
//     dup1 __FUNC_SIG(approve)            eq approveJump          jumpi
//     // Revert if no match is found.
//     0x00 dup1 revert

//     allowanceJump:
//         ALLOWANCE()
//     approveJump:
//         APPROVE()
//     balanceOfJump:
//         BALANCE_OF()
//     decimalsJump:
//         DECIMALS()
//     nameJump:
//         NAME()
//     symbolJump:
//         SYMBOL()
//     totalSupplyJump:
//         TOTAL_SUPPLY()
//     transferFromJump:
//         TRANSFER_FROM()
//     transferJump:
//         TRANSFER()
// }